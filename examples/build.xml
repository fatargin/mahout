<?xml version="1.0"?>

<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
 -->

<project name="mahout-examples" default="dist-jar" basedir=".">
  <property file="build.properties" />
  <property name="Name" value="Examples" />

  <tstamp>
    <format property="year" pattern="yyyy"/>
    <format property="DSTAMP" pattern="yyyy-MM-dd"/>
    <format property="TSTAMP" pattern="HH:mm:ss"/>
    <!-- datetime format that is safe to treat as part of a dotted version -->
    <format property="dateversion" pattern="yyyy.MM.dd.HH.mm.ss" />
  </tstamp>

  <!-- Java Version we are compatible with -->
  <property name="java.compat.version" value="6" />

  <!-- Mahout Implementation Version -->
  <!--
       This can be any string value that does not include spaces
       This will be used when creating build artifact file names.

       By default, this should be set to "X.Y.N-dev" where X.Y.N is
       "1 greater" then the last version released (on this branch).
    -->
  <property name="version" value="0.1" />

  <!-- 3rd party libraries for compilation -->
  <property name="shared-lib" value="../lib" />
  <property name="examples-lib" value="lib" />
  <property name="core-lib" value="../core/lib" />

  <!-- mahout source files -->
  <property name="src" value="src" />

  <!-- Destination for compiled classes and binaries -->
  <property name="dest" value="build" />

  <!-- Destination for distribution files (demo WAR, src distro, etc.) -->
  <property name="dist" value="dist" />

  <!-- Type of checksum to compute for distribution files -->
  <property name="checksum.algorithm" value="md5" />

  <property name="fullname" value="apache-${ant.project.name}"/>
  <property name="fullnamever" value="apache-${ant.project.name}-${version}"/>

  <!-- Mahout Specification Version -->
  <!--
       This will be used in the Manifest file, and therefore must
       match the pattern "digit+{.digit+}*"

       By default, this should be set to "X.Y.M.${dateversion}"
       where X.Y.M is the last version released (on this branch).
    -->
  <property name="specversion" value="0.1.${dateversion}" />

  <!-- Javadoc properties -->
  <property name="javadoc.years" value="2006 - ${year}" />
  <property name="build.docs" value="${dest}/docs"/>
  <property name="build.javadoc" value="${build.docs}/api"/>
  <property name="javadoc.access" value="protected"/>
  <property name="javadoc.link.java"
            value="http://java.sun.com/javase/6/docs/api/"/>
  <property name="javadoc.link.junit"
            value="http://junit.sourceforge.net/javadoc/"/>
  <property name="javadoc.link.lucene"
            value="http://lucene.apache.org/java/docs/api/"/>
  <property name="javadoc.packages" value="org.apache.mahout.*"/>

  <!-- JUnit properties -->
  <property name="junit.output.dir" location="${dest}/test-results"/>
  <property name="junit.reports" location="${dest}/test-results/reports"/>
  <property name="junit.includes" value="**/Test*.java,**/*Test.java"/>
  <property name="tests.verbose" value="false"/>

  <property name="junit.jar" value="junit-3.8.2.jar"/>
  <property name="junit-location.jar" value="${shared-lib}/${junit.jar}"/>
  <path id="junit-path">
    <pathelement location="${junit-location.jar}"/>
  </path>


  <!-- The compilation classpath -->
  <path id="compile.classpath">
    <fileset dir="${shared-lib}">
      <include name="*.jar" />
      <exclude name="junit*.jar"/>
    </fileset>
    <fileset dir="${examples-lib}">
      <include name="*.jar" />
    </fileset>
    <fileset dir="${core-lib}">
      <include name="*.jar" />
    </fileset>    
    <filelist files="${basedir}/../core/dist/apache-mahout-core-${version}.jar"/>
  </path>
  <path id="test.classpath">
    <path refid="junit-path"/>
    <path refid="compile.classpath"/>
    <pathelement location="${dest}/test-classes"/>
    <pathelement location="${dest}/classes"/>
    <pathelement location="${basedir}/../core/build/test-classes"/>
  </path>


  <path id="junit.classpath">
    <path refid="test.classpath"/>
    <pathelement path="${java.class.path}"/>
  </path>


  <!-- Macro for compilation -->
  <macrodef name="mahout-javac">
    <attribute name="destdir" />
    <attribute name="classpathref" />
    <element name="nested" optional="true" implicit="true" />
    <sequential>
      <mkdir dir="@{destdir}" />
      <javac destdir="@{destdir}"
             target="${java.compat.version}"
             source="${java.compat.version}"
             debug="on"
             encoding="utf8"
             sourcepath=""
             classpathref="@{classpathref}">
         <nested />
      </javac>
    </sequential>
  </macrodef>

  <!-- Macro for building Jars -->
  <macrodef name="mahout-jar">
    <attribute name="destfile" />
    <attribute name="basedir" />
    <attribute name="includes" default="org/apache/**" />
    <attribute name="manifest" default="${dest}/META-INF/MANIFEST.MF" />
    <element name="nested" optional="true" implicit="true" />
    <sequential>
      <jar destfile="@{destfile}"
           basedir="@{basedir}"
           includes="@{includes}"
           filesetmanifest="skip"
           manifest="@{manifest}">
        <metainf dir="${basedir}" includes="LICENSE.txt,NOTICE.txt"/>
        <nested />
      </jar>
    </sequential>
  </macrodef>

  <!-- Macro for building checksum files
       This is only needed until the "format" option is supported
       by ant's built in checksum task
   -->
  <macrodef name="mahout-checksum">
    <attribute name="file"/>
    <!-- NOTE: we use the value of @{file} in the names any properties
         set because macro's don't have variables, and otherwise we
         wouldn't be able to checksum more then one file per build
      -->
    <sequential>
     <checksum file="@{file}"
               property="@{file}.sum"
               algorithm="${checksum.algorithm}" />
     <basename file="@{file}" property="@{file}.base" />
     <concat destfile="@{file}.${checksum.algorithm}"
             force="yes"
             append="false"
             fixlastline="yes">
       <header trimleading="yes">${@{file}.sum}  </header>
       <!-- empty fileset to trick concat -->
       <fileset dir="." excludes="**" />
       <footer trimleading="yes">${@{file}.base}
       </footer>
     </concat>
    </sequential>
  </macrodef>

  <!-- Default target: usage.  Prints out instructions. -->
  <target name="usage"
          description="Prints out instructions">
    <echo message="Welcome to the Mahout project!" />
    <!--<echo message="Use 'ant example' to create a runnable example configuration." />-->
    <echo message="And for developers:"/>
    <echo message="Use 'ant clean' to clean compiled files." />
    <echo message="Use 'ant compile' to compile the source code." />
    <!--<echo message="Use 'ant dist' to build the project WAR and JAR files." />
    <echo message="Use 'ant package' to build a .zip and .tgz for distribution." />-->
    <echo message="Use 'ant test' to run unit tests." />
  </target>

  <!-- Clean: cleans compiled files and other temporary artifacts. -->
  <target name="clean"
          description="Cleans compiled files and other temporary artifacts.">
    <delete dir="${dest}" />
    <delete dir="${dist}" />
  </target>


  <!-- ========================================================================= -->
  <!-- ===================== COMPILATION-RELATED TASKS ========================= -->
  <!-- ========================================================================= -->
  <!-- Compile the project. -->
  <target name="compile"
    description="Compile the source code." depends="build-core">
    <mahout-javac destdir="${dest}/classes"
      classpathref="compile.classpath">
      <src path="${src}/main/java" />
    </mahout-javac>
  </target>
  <target name="build-core">
    <ant inheritAll="false" dir="../core" antfile="build.xml" target="dist-jar"/>
  </target>

  <target name="javadoc" depends="compile"
          description="Generates javadoc documentation.">

    <mkdir dir="${build.javadoc}"/>

    <path id="javadoc.classpath">
       <path refid="compile.classpath"/>
    </path>

    <javadoc
      destdir="${build.javadoc}"
      author="true"
      version="true"
      failonerror="true"
      use="true"
      encoding="utf8"
      access="${javadoc.access}"
      windowtitle="${Name} ${version} API"
      doctitle="${Name} ${version} API (${specversion})"
      bottom="Copyright &amp;copy; ${javadoc.years} The Apache Software Foundation"
      >
        <packageset dir="${src}/main/java"/>
        <link href="${javadoc.link.java}"/>
        <link href="${javadoc.link.junit}"/>
        <classpath refid="javadoc.classpath"/>
    </javadoc>
  </target>

  <target name="compile-test" depends="compile, compile-core-test">
    <mahout-javac
      destdir="${dest}/test-classes/" classpathref="test.classpath">
      <src path="${src}/test/java"/>
    </mahout-javac>

    <!-- Copy any data files present to the classpath -->
    <copy todir="${dest}/test-classes">
      <fileset dir="src/test/java" excludes="**/*.java"/>
    </copy>

    <!-- Copy any data files present to the classpath -->
    <copy todir="${dest}/test-classes">
      <fileset dir="src/test/resources"/>
    </copy>
  </target>
  <target name="compile-core-test">
    <ant inheritAll="false" dir="../core" antfile="build.xml" target="compile-test"/>
  </target>

  <target name="test" depends="compile-test, dist-jar" description="Runs unit tests">
    <mkdir dir="${junit.output.dir}"/>
    <junit printsummary="off" haltonfailure="no"
      errorProperty="tests.failed" failureProperty="tests.failed" maxmemory="256m">
      <classpath refid="junit.classpath"/>
      <assertions>
        <enable package="org.apache.mahout"/>
      </assertions>

      <!-- allow tests to control debug prints -->
      <sysproperty key="tests.verbose" value="${tests.verbose}"/>

      <!-- TODO: create propertyset for test properties, so each project can have its own set -->
      <sysproperty key="dataDir" file="src/test"/>
      <sysproperty key="tempDir" file="${dest}/test"/>
      <sysproperty key="java.io.tmpdir" file="${dest}/test"/>


      <formatter type="xml"/>
      <formatter type="brief" usefile="false"/>
      <batchtest fork="yes" todir="${junit.output.dir}" unless="testcase">
        <fileset dir="${src}/test/java" includes="${junit.includes}" excludes="${junit.excludes}"/>
      </batchtest>
      <batchtest fork="yes" todir="${junit.output.dir}" if="testcase">
        <fileset dir="${src}/test/java" includes="**/${testcase}.java"/>
      </batchtest>
    </junit>
    <junitreport todir="${junit.output.dir}">
      <fileset dir="${junit.output.dir}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${junit.output.dir}/html"/>
    </junitreport>

    <!-- create this file, then if we don't fail, delete it -->
    <!-- this meme makes it easy to tell if contribs have failed later -->
    <echo file="${dest}/junitfailed.flag">MAYBE</echo>
    <fail if="tests.failed">Tests failed!</fail>
    <!-- life would be easier if echo had an 'if' attribute like fail -->
    <delete file="${dest}/junitfailed.flag" />

  </target>

  <target name="examples-test" depends="compile-test, dist-jar" description="Runs unit tests for the examples">
    <mkdir dir="${junit.output.dir}/examples"/>
    <junit printsummary="off" haltonfailure="no"
      errorProperty="tests.failed" failureProperty="tests.failed" maxmemory="256m">
      <classpath refid="junit.classpath"/>
      <assertions>
        <enable package="org.apache.mahout"/>
      </assertions>

      <!-- allow tests to control debug prints -->
      <sysproperty key="tests.verbose" value="${tests.verbose}"/>

      <!-- TODO: create propertyset for test properties, so each project can have its own set -->
      <sysproperty key="dataDir" file="src/test"/>
      <sysproperty key="tempDir" file="${dest}/test"/>
      <sysproperty key="java.io.tmpdir" file="${dest}/test"/>

      <formatter type="xml"/>
      <formatter type="brief" usefile="false"/>
      <batchtest fork="yes" todir="${junit.output.dir}/examples" unless="testcase">
        <fileset dir="${src}/test/examples" includes="${junit.includes}" excludes="${junit.excludes}"/>
      </batchtest>
      <batchtest fork="yes" todir="${junit.output.dir}/examples" if="testcase">
        <fileset dir="${src}/test/examples" includes="**/${testcase}.java"/>
      </batchtest>
    </junit>
    <junitreport todir="${junit.output.dir}/examples">
      <fileset dir="${junit.output.dir}/examples">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${junit.output.dir}/examples/html"/>
    </junitreport>

    <fail if="tests.failed">Tests failed!</fail>
  </target>

  <target name="job" depends="compile">
    <jar jarfile="${dest}/${fullnamever}.job">
      <zipfileset dir="${dest}/classes"/>
      <zipfileset dir="${shared-lib}" prefix="lib"
                  includes="**/*.jar"/>
      <zipfileset dir="${examples-lib}" prefix="lib"
                  includes="**/*.jar" excludes="easymock*.jar"/>
      <zipfileset dir="${core-lib}" prefix="lib"
                  includes="**/*.jar" excludes="hadoop-*.jar"/>
      <zipfileset dir="${basedir}/../core/dist/" prefix="lib" includes="apache-mahout-core-${version}.jar"/>
    </jar>
  </target>


  <target name="dist-jar"
          description="Creates the Mahout JAR Distribution file."
          depends="compile, make-manifest">
    <mkdir dir="${dist}" />
    <mahout-jar
         destfile="${dist}/${fullnamever}.jar"
         basedir="${dest}/classes" />

  </target>

  <target name="make-manifest" >
     <!-- If possible, include the svnversion -->
     <exec dir="." executable="svnversion" outputproperty="svnversion" failifexecutionfails="false">
      <arg line="."/>
     </exec>

     <!-- no description, don't advertise -->
     <mkdir dir="${dest}/META-INF/" />
     <manifest mode="replace" file="${dest}/META-INF/MANIFEST.MF">
        <!--
        http://java.sun.com/j2se/1.5.0/docs/guide/jar/jar.html#JAR%20Manifest
        http://java.sun.com/j2se/1.5.0/docs/guide/versioning/spec/versioning2.html
        http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Package.html
        http://java.sun.com/j2se/1.5.0/docs/api/java/util/jar/package-summary.html
        http://java.sun.com/developer/Books/javaprogramming/JAR/basics/manifest.html
        -->
        <!-- Don't set 'Manifest-Version' it identifies the version of the
             manifest file format, and should allways be 1.0 (the default)

             Don't set 'Created-by' attribute, it's purpose is
             to identify the version of java used to build the jar,
             which ant will do by default.

             Ant will happily override these with bogus strings if you
             tell it to, so don't.

             NOTE: we don't use section info because all of our manifest data
             applies to the entire jar/war ... no package specific info.
        -->
        <attribute name="Extension-Name"
                   value="org.apache.mahout"/>
        <attribute name="Specification-Title"
                   value="Apache Mahout Machine Learning"/>
        <!-- spec version must match "digit+{.digit+}*" -->
        <attribute name="Specification-Version"
                   value="${specversion}"/>
        <attribute name="Specification-Vendor"
                   value="The Apache Software Foundation"/>
        <attribute name="Implementation-Title"
                   value="org.apache.mahout"/>
        <!-- impl version can be any string -->
        <attribute name="Implementation-Version"
                   value="${version} ${svnversion} - ${user.name} - ${DSTAMP} ${TSTAMP}"/>
        <attribute name="Implementation-Vendor"
                   value="The Apache Software Foundation"/>
        <attribute name="X-Compile-Source-JDK"
                   value="${java.compat.version}"/>
        <attribute name="X-Compile-Target-JDK"
                   value="${java.compat.version}"/>
     </manifest>
  </target>

  <!-- EXAMPLES -->



  <property name="working.dir" value="work"/>
  <target name="check-files">
    <available file="temp/20news-18828.tar.gz" property="20news-18828.exists"/>
    <available file="${working.dir}/20news-18828" property="20news-18828.expanded"/>

  </target>

  <target name="get-20news-18828" unless="20news-18828.exists">
    <get src="http://people.csail.mit.edu/jrennie/20Newsgroups/20news-18828.tar.gz"
         dest="temp/20news-18828.tar.gz"/>

  </target>
  <target name="expand-20news-18828" unless="20news-18828.expanded">
    <gunzip src="temp/20news-18828.tar.gz" dest="temp"/>
    <untar src="temp/20news-18828.tar" dest="${working.dir}"/>
  </target>

  <target name="extract-20news-18828" depends="check-files, compile" unless="reuters.extracted">
    <mkdir dir="${working.dir}/20news-18828-collapse"/>
    <java classname="org.apache.mahout.classifiers.bayes.ExtractTwentyNewsgroups" maxmemory="1024M" fork="true">
      <classpath refid="compile.classpath"/>
      <!--
      Input format is:
      inputDir outputDir label Analyzer character set
      -->
      <arg line="-p ${working.dir}/20news-18828/ -o ${working.dir}/20news-18828-collapse -a org.apache.lucene.analysis.standard.StandardAnalyzer -c UTF-8"/>
    </java>
  </target>

  <target name="get-files" depends="check-files">
    <mkdir dir="temp"/>
    <antcall target="get-20news-18828"/>
    <antcall target="expand-20news-18828"/>
    <!--<antcall target="extract-20news-18828"/>-->
  </target>

</project>
